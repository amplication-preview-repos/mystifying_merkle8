/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Balance } from "./Balance";
import { BalanceCountArgs } from "./BalanceCountArgs";
import { BalanceFindManyArgs } from "./BalanceFindManyArgs";
import { BalanceFindUniqueArgs } from "./BalanceFindUniqueArgs";
import { CreateBalanceArgs } from "./CreateBalanceArgs";
import { UpdateBalanceArgs } from "./UpdateBalanceArgs";
import { DeleteBalanceArgs } from "./DeleteBalanceArgs";
import { Group } from "../../group/base/Group";
import { User } from "../../user/base/User";
import { BalanceService } from "../balance.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Balance)
export class BalanceResolverBase {
  constructor(
    protected readonly service: BalanceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Balance",
    action: "read",
    possession: "any",
  })
  async _balancesMeta(
    @graphql.Args() args: BalanceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Balance])
  @nestAccessControl.UseRoles({
    resource: "Balance",
    action: "read",
    possession: "any",
  })
  async balances(
    @graphql.Args() args: BalanceFindManyArgs
  ): Promise<Balance[]> {
    return this.service.balances(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Balance, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Balance",
    action: "read",
    possession: "own",
  })
  async balance(
    @graphql.Args() args: BalanceFindUniqueArgs
  ): Promise<Balance | null> {
    const result = await this.service.balance(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Balance)
  @nestAccessControl.UseRoles({
    resource: "Balance",
    action: "create",
    possession: "any",
  })
  async createBalance(
    @graphql.Args() args: CreateBalanceArgs
  ): Promise<Balance> {
    return await this.service.createBalance({
      ...args,
      data: {
        ...args.data,

        group: args.data.group
          ? {
              connect: args.data.group,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Balance)
  @nestAccessControl.UseRoles({
    resource: "Balance",
    action: "update",
    possession: "any",
  })
  async updateBalance(
    @graphql.Args() args: UpdateBalanceArgs
  ): Promise<Balance | null> {
    try {
      return await this.service.updateBalance({
        ...args,
        data: {
          ...args.data,

          group: args.data.group
            ? {
                connect: args.data.group,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Balance)
  @nestAccessControl.UseRoles({
    resource: "Balance",
    action: "delete",
    possession: "any",
  })
  async deleteBalance(
    @graphql.Args() args: DeleteBalanceArgs
  ): Promise<Balance | null> {
    try {
      return await this.service.deleteBalance(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Group, {
    nullable: true,
    name: "group",
  })
  @nestAccessControl.UseRoles({
    resource: "Group",
    action: "read",
    possession: "any",
  })
  async getGroup(@graphql.Parent() parent: Balance): Promise<Group | null> {
    const result = await this.service.getGroup(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: Balance): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

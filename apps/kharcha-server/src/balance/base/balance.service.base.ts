/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Balance as PrismaBalance,
  Group as PrismaGroup,
  User as PrismaUser,
} from "@prisma/client";

export class BalanceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BalanceCountArgs, "select">): Promise<number> {
    return this.prisma.balance.count(args);
  }

  async balances<T extends Prisma.BalanceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BalanceFindManyArgs>
  ): Promise<PrismaBalance[]> {
    return this.prisma.balance.findMany<Prisma.BalanceFindManyArgs>(args);
  }
  async balance<T extends Prisma.BalanceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BalanceFindUniqueArgs>
  ): Promise<PrismaBalance | null> {
    return this.prisma.balance.findUnique(args);
  }
  async createBalance<T extends Prisma.BalanceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BalanceCreateArgs>
  ): Promise<PrismaBalance> {
    return this.prisma.balance.create<T>(args);
  }
  async updateBalance<T extends Prisma.BalanceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BalanceUpdateArgs>
  ): Promise<PrismaBalance> {
    return this.prisma.balance.update<T>(args);
  }
  async deleteBalance<T extends Prisma.BalanceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BalanceDeleteArgs>
  ): Promise<PrismaBalance> {
    return this.prisma.balance.delete(args);
  }

  async getGroup(parentId: string): Promise<PrismaGroup | null> {
    return this.prisma.balance
      .findUnique({
        where: { id: parentId },
      })
      .group();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.balance
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
